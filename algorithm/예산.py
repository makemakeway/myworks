# S사에서는 각 부서에 필요한 물품을 지원해 주기 위해 부서별로 물품을 구매하는데 필요한 금액을 조사했습니다. 
# 그러나, 전체 예산이 정해져 있기 때문에 모든 부서의 물품을 구매해 줄 수는 없습니다. 
# 그래서 최대한 많은 부서의 물품을 구매해 줄 수 있도록 하려고 합니다.

# 물품을 구매해 줄 때는 각 부서가 신청한 금액만큼을 모두 지원해 줘야 합니다. 
# 예를 들어 1,000원을 신청한 부서에는 정확히 1,000원을 지원해야 하며, 
# 1,000원보다 적은 금액을 지원해 줄 수는 없습니다.

# 부서별로 신청한 금액이 들어있는 배열 d와 예산 budget이 매개변수로 주어질 때, 
# 최대 몇 개의 부서에 물품을 지원할 수 있는지 return 하도록 solution 함수를 완성해주세요.

def solution(d, budget):
    answer = 0
    d = sorted(d)           # 최대한 많은 부서에 지원해야 하므로, 오름차순으로 정렬
    s = []                  # 지원한 예산의 합을 저장해둘 리스트
    for n in d:
        if sum(s) < budget: # 총 예산이 더 크다면
            s.append(n)     # n을 지원한 예산에 추가
        if sum(s) > budget: # 예산을 지원하여 총 예산이 더 작아졌다면
            s.pop()         # 마지막으로 지원했던 예산을 제거 후
            return len(s)   # 지금까지 지원했던 부서의 숫자를 리턴
    return len(s)           # 모든 부서에 지원을 했는데 예산이 남아있는 경우이므로, 지원한 부서의 숫자를 리턴

